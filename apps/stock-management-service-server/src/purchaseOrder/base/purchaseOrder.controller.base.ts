/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PurchaseOrderService } from "../purchaseOrder.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PurchaseOrderCreateInput } from "./PurchaseOrderCreateInput";
import { PurchaseOrder } from "./PurchaseOrder";
import { PurchaseOrderFindManyArgs } from "./PurchaseOrderFindManyArgs";
import { PurchaseOrderWhereUniqueInput } from "./PurchaseOrderWhereUniqueInput";
import { PurchaseOrderUpdateInput } from "./PurchaseOrderUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PurchaseOrderControllerBase {
  constructor(
    protected readonly service: PurchaseOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PurchaseOrder })
  @swagger.ApiBody({
    type: PurchaseOrderCreateInput,
  })
  @nestAccessControl.UseRoles({
    resource: "PurchaseOrder",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPurchaseOrder(
    @common.Body() data: PurchaseOrderCreateInput
  ): Promise<PurchaseOrder> {
    return await this.service.createPurchaseOrder({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PurchaseOrder] })
  @ApiNestedQuery(PurchaseOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PurchaseOrder",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async purchaseOrders(
    @common.Req() request: Request
  ): Promise<PurchaseOrder[]> {
    const args = plainToClass(PurchaseOrderFindManyArgs, request.query);
    return this.service.purchaseOrders({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PurchaseOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PurchaseOrder",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async purchaseOrder(
    @common.Param() params: PurchaseOrderWhereUniqueInput
  ): Promise<PurchaseOrder | null> {
    const result = await this.service.purchaseOrder({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PurchaseOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: PurchaseOrderUpdateInput,
  })
  @nestAccessControl.UseRoles({
    resource: "PurchaseOrder",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePurchaseOrder(
    @common.Param() params: PurchaseOrderWhereUniqueInput,
    @common.Body() data: PurchaseOrderUpdateInput
  ): Promise<PurchaseOrder | null> {
    try {
      return await this.service.updatePurchaseOrder({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PurchaseOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PurchaseOrder",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePurchaseOrder(
    @common.Param() params: PurchaseOrderWhereUniqueInput
  ): Promise<PurchaseOrder | null> {
    try {
      return await this.service.deletePurchaseOrder({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
